#[derive(Debug)]
struct Node<T: Ord> {
    value: T,
    left: Option<Box<Node<T>>>,
    right: Option<Box<Node<T>>>,
}

impl<T: Ord> Node<T> {
    fn new(value: T) -> Self {
        Node { value, left: None, right: None }
    }

    fn insert(&mut self, value: T) {
        if value < self.value {
            match &mut self.left {
                Some(left) => left.insert(value),
                None => self.left = Some(Box::new(Node::new(value))),
            }
        } else {
            match &mut self.right {
                Some(right) => right.insert(value),
                None => self.right = Some(Box::new(Node::new(value))),
            }
        }
    }

    fn contains(&self, value: &T) -> bool {
        if self.value == *value {
            return true;
        }
        if *value < self.value {
            match &self.left {
                Some(left) => left.contains(value),
                None => false,
            }
        } else {
            match &self.right {
                Some(right) => right.contains(value),
                None => false,
            }
        }
    }
}

fn main() {
    let mut root = Node::new(5);
    root.insert(3);
    root.insert(7);
    root.insert(1);
    root.insert(9);
    println!("{:?}", root.contains(&7)); // true
    println!("{:?}", root.contains(&2)); // false
}
